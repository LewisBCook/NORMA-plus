<?xml version="1.0" encoding="utf-8"?>
<!--
	Natural Object-Role Modeling Architect for Visual Studio

	Copyright © Neumont University. All rights reserved.
	Copyright © The ORM Foundation. All rights reserved.
	Copyright © ORM Solutions, LLC. All rights reserved.

	The use and distribution terms for this software are covered by the
	Common Public License 1.0 (http://opensource.org/licenses/cpl) which
	can be found in the file CPL.txt at the root of this distribution.
	By using this software in any fashion, you are agreeing to be bound by
	the terms of this license.

	You must not remove this notice, or any other, from this software.
-->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
	<!-- NOTE: All comments and instructions in this file are specifically for NORMA setup, and do not necessarily apply to setup packages in general. -->
	<?include Config.wxi?>
	
	<Product
		Name="!(loc.ProductName$(var.VSShortName))"
		Manufacturer="!(loc.Manufacturer)"
		Language="$(var.DefaultLCID)"
		Version="$(var.ProductVersion)"
		Id="$(var.ProductCode)"
		UpgradeCode="$(var.UpgradeCode)">

		<Package
			Id="$(var.PackageCode)"
			Description="!(loc.ProductName$(var.VSShortName)) - $(var.ReleaseDescription)"
			Comments="!(loc.PackageCommentsPrefix)!(loc.ProductName$(var.VSShortName))!(loc.PackageCommentsSuffix)"
			Manufacturer="!(loc.Manufacturer)"
			InstallerVersion="300"
			Compressed="yes"
			ShortNames="no"
			InstallPrivileges="elevated"/>

		<Upgrade Id="$(var.UpgradeCode)">
			<UpgradeVersion Minimum="0.0.0" Maximum="$(var.ProductVersion)" IncludeMinimum="yes" MigrateFeatures="yes" Property="UPGRADEPRODUCTCODES"/>
		</Upgrade>

		<!-- Our commit custom action DevEnvSetupCustomAction will not be run if rollback is disabled. Therefore, we require that rollback NOT be disabled. -->
		<Condition Message="!(loc.RollbackMustNotBeDisabled)">NOT RollbackDisabled</Condition>

		<Condition Message="!(loc.Windows2000OrHigherRequired)">VersionNT >= 500</Condition>

    <?if $(var.VSVerInt) >= 15?>
      <!-- We need to use custom actions to get this now since it's no longer in the registry-->
      <Binary Id="Setup.CustomActions.dll" SourceFile="Setup.CustomActions\bin\$(var.BuildConfiguration)\Setup.CustomActions.CA.dll" />
      <CustomAction Id="DetermineVsInstallPaths" Execute="immediate" Return="ignore" BinaryKey="Setup.CustomActions.dll" DllEntry="DetermineVisualStudioInstalls" />      
      <!-- We need to set the exists proeprties since the property used in a directory assumes the parent directories' value if empty -->
      <SetProperty Id="VSPRODUCTDIREXISTS_Community" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Community]"></SetProperty>
      <SetProperty Id="VSPRODUCTDIREXISTS_Professional" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Professional]"></SetProperty>
      <SetProperty Id="VSPRODUCTDIREXISTS_Enterprise" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Enterprise]"></SetProperty>
      <!-- Create devenv path for calling /setup at the end -->
      <SetProperty Id="VSDEVENVPATH_Community" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Community]\Common7\IDE\devenv.exe">VSPRODUCTDIR_Community</SetProperty>
      <SetProperty Id="VSDEVENVPATH_Professional" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Professional]\Common7\IDE\devenv.exe">VSPRODUCTDIR_Professional</SetProperty>
      <SetProperty Id="VSDEVENVPATH_Enterprise" Sequence="both" After="DetermineVsInstallPaths" Value="[VSPRODUCTDIR_Enterprise]\Common7\IDE\devenv.exe">VSPRODUCTDIR_Enterprise</SetProperty>
      <!-- Get the location of the vslauncher C:\Program Files (x86)\Common Files\Microsoft Shared\MSEnv\VSLauncher.exe -->
      <Property Id="VSVERSIONSELECTORPATH">
        <DirectorySearch Id="VSVersionSelectorPathDirectorySearch" Path="[ProgramFilesFolder]\Common Files\Microsoft Shared\MSEnv">
          <FileSearch Id="VSVersionSelectorPathFileSearch" Name="VSLauncher.exe"></FileSearch>
        </DirectorySearch>
      </Property>
      <Property Id="VSWHEREPATH">
        <DirectorySearch Id="VSWherePathDirectorySearch" Path="[ProgramFilesFolder]\Microsoft Visual Studio\Installer">
          <FileSearch Id="VSWherePathFileSearch" Name="vswhere.exe"></FileSearch>
        </DirectorySearch>
      </Property>
      <Condition Message="!(loc.VSWhereRequired)">VSWHEREPATH OR Installed</Condition>
      <!-- Include the VS setup bootstrappers (https://docs.microsoft.com/en-us/visualstudio/install/use-command-line-parameters-to-install-visual-studio?view=vs-2019)-->
      <Binary Id="VS_Setup_Bootstrapper_Community" SourceFile="VSSetupBootstrappers$(var.VSLongProductYear)\vs_community.exe" />
      <Binary Id="VS_Setup_Bootstrapper_Professional" SourceFile="VSSetupBootstrappers$(var.VSLongProductYear)\vs_professional.exe" />
      <Binary Id="VS_Setup_Bootstrapper_Enterprise" SourceFile="VSSetupBootstrappers$(var.VSLongProductYear)\vs_enterprise.exe" />
    <?else?>
      <Property Id="VSPRODUCTDIR">
        <RegistrySearch Id="VSProductDirRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\Setup\VS" Name="ProductDir" Type="directory" Win64="$(var.Win64)"/>
      </Property>
      <?ifdef VSIXInstall?>
        <Property Id="VSENVIRONMENTDIR">
          <RegistrySearch Id="VSTemplateItemDirRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\Setup\VS" Name="EnvironmentDirectory" Type="directory" Win64="$(var.Win64)"/>
        </Property>
      <?else?>
      <?ifdef NewORMFileViaNewFileItems?>
        <Property Id="VSENVIRONMENTDIR">
          <RegistrySearch Id="VSEnvironmentDirRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\Setup\VS" Name="EnvironmentDirectory" Type="directory" Win64="$(var.Win64)"/>
        </Property>
      <?endif?>
      <Property Id="VSTEMPLATEITEMDIR">
        <RegistrySearch Id="VSTemplateItemDirRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\VSTemplate\Item" Name="UserFolder" Type="directory" Win64="$(var.Win64)"/>
      </Property>
      <?endif?>
      <Property Id="VSENVIRONMENTPATH">
        <RegistrySearch Id="VSEnvironmentPathRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\Setup\VS" Name="EnvironmentPath" Type="raw" Win64="$(var.Win64)"/>
      </Property>
    <?endif?>
		<!-- Make sure Visual Studio 2005 is installed. Since VS requires .NET, we don't need to check for it separately. -->
		<!-- Technically, since DSL Tools requires VS, we don't even need to do this check, but since we have to get the properties anyway, we might as well. It gives the user a more appropriate error message, anyway. -->
    <?if $(var.VSVerInt) >= 15?>
      <Condition Message="!(loc.VisualStudio$(var.VSLongProductYear)Required)">VSPRODUCTDIREXISTS_Community OR VSPRODUCTDIREXISTS_Professional OR VSPRODUCTDIREXISTS_Enterprise OR Installed</Condition>
    <?else?>
		  <?ifdef VSIXInstall?>
			  <Condition Message="!(loc.VisualStudio$(var.VSLongProductYear)Required)">(VSPRODUCTDIR AND VSENVIRONMENTPATH) OR Installed</Condition>
		  <?else?>
			  <Condition Message="!(loc.VisualStudio$(var.VSLongProductYear)Required)">(VSPRODUCTDIR AND VSTEMPLATEITEMDIR AND VSENVIRONMENTPATH) OR Installed</Condition>
		  <?endif?>
    <?endif?>

		<?ifdef RequireDSLRedist?>
			<Property Id="DSLTOOLSREDISTINSTALL">
				<RegistrySearch Id="DSLToolsRedistInstallRegistrySearch" Root="HKLM" Key="$(var.DSLRegRoot)" Name="RedistInstall" Type="raw" Win64="$(var.Win64)"/>
			</Property>
			<!-- Make sure the DSL Tools redistributable or SDK is installed. -->
			<Condition Message="!(loc.DSLToolsRequired)">DSLTOOLSREDISTINSTALL OR Installed</Condition>
		<?endif?>

		<Property Id="PLIXSCHEMAVERSION">
			<RegistrySearch Id="PLiXSchemaVersionRegistrySearch" Root="HKLM" Key="$(var.PLiXRegRoot)" Name="SchemaVersion" Type="raw" Win64="$(var.Win64)"/>
		</Property>
		<Condition Message="!(loc.PLiXRequired)">(PLIXSCHEMAVERSION >= $(var.PLiXMinimumSchemaVersion)) OR Installed</Condition>
		
		<!-- Get the package GUIDs for the various VS packages. -->
    <?if $(var.VSVerInt) < 15?>
      <!-- Moved to the vsix package def for 15+ -->
		  <?ifdef FixedCSharpPackageGuid?>
			  <Property Id="VCSHARPPACKAGEGUID" Value="$(var.FixedCSharpPackageGuid)"/>
		  <?else?>
			  <Property Id="VCSHARPPACKAGEGUID">
				  <RegistrySearch Id="VCSharpPackageGUIDRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\InstalledProducts\Microsoft Visual C#" Name="Package" Type="raw" Win64="$(var.Win64)"/>
			  </Property>
		  <?endif?>
		  <Property Id="VBASICPACKAGEGUID">
			  <RegistrySearch Id="VBasicPackageGUIDRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\InstalledProducts\Microsoft Visual Basic" Name="Package" Type="raw" Win64="$(var.Win64)"/>
		  </Property>
		  <?ifdef JSharpSupport?>
		  <Property Id="VJSHARPPACKAGEGUID">
			  <RegistrySearch Id="VJSharpPackageGUIDRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\InstalledProducts\Microsoft Visual J#" Name="Package" Type="raw" Win64="$(var.Win64)"/>
		  </Property>
		  <?endif?>
		  <Property Id="VCPLUSPLUSPACKAGEGUID">
			  <RegistrySearch Id="VCPlusPlusPackageGUIDRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\InstalledProducts\Microsoft Visual C++" Name="Package" Type="raw" Win64="$(var.Win64)"/>
		  </Property>
		  <Property Id="VWEBDEVPACKAGEGUID">
			  <RegistrySearch Id="VWebDevPackageGUIDRegistrySearch" Root="HKLM" Key="$(var.VSRegRoot)\InstalledProducts\Visual Web Developer" Name="Package" Type="raw" Win64="$(var.Win64)"/>
		  </Property>
    <?endif?>

		<!-- Only support per-machine installation. -->
		<Property Id="ALLUSERS">1</Property>
		
		<!-- Setup Add/Remove Programs functionality. -->
		<Property Id="ARPNOMODIFY" Value="1"/>
		<Property Id="ARPCONTACT">!(loc.Manufacturer)</Property>
		<Property Id="ARPPRODUCTICON">AboutBox.ico</Property>
		<Property Id="ARPURLINFOABOUT">$(var.ORMSolutionsWebsiteUrl)</Property>
		<Property Id="ARPURLUPDATEINFO">$(var.NORMAWebsiteUrl)</Property>
		
		<Icon Id="AboutBox.ico" SourceFile="..\ORMModel\Resources\AboutBox.ico"/>
		
		<Media Id="1" Cabinet="NORMA_VS.cab" EmbedCab="yes" CompressionLevel="high"/>

		<FeatureRef Id="MainFeature"/>
		<DirectoryRef Id="TARGETDIR"/>

		<Property Id="ADMINORADVERTISED">!(loc.AdminOrAdvertised)</Property>
		<CustomAction Id="AdminOrAdvertisedCustomAction" Return="check" Error="[ADMINORADVERTISED]"/>
		<AdminExecuteSequence>
			<Custom Before="CostInitialize" Action="AdminOrAdvertisedCustomAction"/>
		</AdminExecuteSequence>
		<AdvertiseExecuteSequence>
			<Custom Before="CostInitialize" Action="AdminOrAdvertisedCustomAction"/>
		</AdvertiseExecuteSequence>

    <CustomAction Id="ArpInstallLocationCustomAction" Property="ARPINSTALLLOCATION" Value="[$(var.DefaultShortProductDir)]"/>
		<?ifdef VSIXInstall?>
      <?if $(var.VSVerInt) >= 15?>
        <!-- Make sure the VS installer is updated (we only need to do this once since the installer is shared -->
        <CustomAction Id="VS_Installer_Update" BinaryKey="VS_Setup_Bootstrapper_Community" ExeCommand="--update --quiet --passive --wait" Return="ignore" Impersonate="no" Execute="commit"/>
        <!-- Make sure the required workloads and components are installed -->
        <CustomAction Id="VS_Component_Check_Community" BinaryKey="VS_Setup_Bootstrapper_Community" ExeCommand="modify --installPath &quot;[VSPRODUCTDIR_Community]&quot; --quiet --passive --wait --add Microsoft.VisualStudio.Component.DslTools" Return="ignore" Impersonate="no" Execute="commit"/>
        <CustomAction Id="VS_Component_Check_Professional" BinaryKey="VS_Setup_Bootstrapper_Professional" ExeCommand="modify --installPath &quot;[VSPRODUCTDIR_Professional]&quot; --quiet --passive --wait --add Microsoft.VisualStudio.Component.DslTools" Return="ignore" Impersonate="no" Execute="commit"/>
        <CustomAction Id="VS_Component_Check_Enterprise" BinaryKey="VS_Setup_Bootstrapper_Enterprise" ExeCommand="modify --installPath &quot;[VSPRODUCTDIR_Enterprise]&quot; --quiet --passive --wait --add Microsoft.VisualStudio.Component.DslTools" Return="ignore" Impersonate="no" Execute="commit"/>
        <!-- Configure VS for new packages-->
        <CustomAction Id="DevEnvSetupCustomAction_Community" Property="VSDEVENVPATH_Community" ExeCommand="/setup" Return="ignore" Impersonate="no" Execute="commit"/>
        <CustomAction Id="DevEnvSetupCustomAction_Professional" Property="VSDEVENVPATH_Professional" ExeCommand="/setup" Return="ignore" Impersonate="no" Execute="commit"/>
        <CustomAction Id="DevEnvSetupCustomAction_Enterprise" Property="VSDEVENVPATH_Enterprise" ExeCommand="/setup" Return="ignore" Impersonate="no" Execute="commit"/>
      <?else?>
        <CustomAction Id="DevEnvSetupCustomAction" Property="VSENVIRONMENTPATH" ExeCommand="$(var.RootSuffixCmd)/updateconfiguration" Return="ignore" Impersonate="no" Execute="commit"/>
      <?endif?>
		<?else?>
		  <CustomAction Id="DevEnvSetupCustomAction" Property="VSENVIRONMENTPATH" ExeCommand="$(var.RootSuffixCmd)/Setup" Return="ignore" Impersonate="no" Execute="commit"/>
		<?endif?>
		<InstallExecuteSequence>
      <?if $(var.VSVerInt) >= 15?>
			  <Custom Before="LaunchConditions" Action="DetermineVsInstallPaths"/>
			<?endif?>
			<RemoveExistingProducts Before="ArpInstallLocationCustomAction"/>
			<Custom Before="InstallInitialize" Action="ArpInstallLocationCustomAction"/>
			<?ifdef DoDevenvSetup?>
        <?if $(var.VSVerInt) >= 15?>
          <Custom Before="InstallFinalize" Action="VS_Installer_Update">NOT Installed AND NOT PATCH</Custom>
          <Custom After="VS_Installer_Update" Action="VS_Component_Check_Community">NOT Installed AND NOT PATCH AND VSPRODUCTDIREXISTS_Community</Custom>  
          <Custom After="VS_Component_Check_Community" Action="DevEnvSetupCustomAction_Community">VSPRODUCTDIREXISTS_Community</Custom>
          <Custom After="VS_Installer_Update" Action="VS_Component_Check_Professional">NOT Installed AND NOT PATCH AND VSPRODUCTDIREXISTS_Professional</Custom>
          <Custom After="VS_Component_Check_Professional" Action="DevEnvSetupCustomAction_Professional">VSPRODUCTDIREXISTS_Professional</Custom>
          <Custom After="VS_Installer_Update" Action="VS_Component_Check_Enterprise">NOT Installed AND NOT PATCH AND VSPRODUCTDIREXISTS_Enterprise</Custom>
          <Custom After="VS_Component_Check_Enterprise" Action="DevEnvSetupCustomAction_Enterprise">VSPRODUCTDIREXISTS_Enterprise</Custom>
        <?else?>
          <Custom Before="InstallFinalize" Action="DevEnvSetupCustomAction"/>
        <?endif?>
			<?endif?>
			<!-- We need to move InstallFinalize back from its normal point in the sequence, since the MSHelp2 merge modules expect it to occur later. -->
			<InstallFinalize Sequence="8000"/>
		</InstallExecuteSequence>
    
		<UIRef Id="NORMAUI"/>
	</Product>
</Wix>
